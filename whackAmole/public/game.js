/*
ToDo
create a way of varying mouse speed
max levels and number of levels, redundant?
*/









/*
Everytime the player advances a level the difficulty variable increases. 
when that happens one more box will appear on screen and the length of the used circles array will increase by one
this essentially increases the number of places that circle will cycle through.
The length of the used circles array is always 2 less than the number of rectangles
thus the number of times the circle will appear before it can appear in a box again is always numberofboxes - 2
increasing the number of boxes and corresponfing length of used circles increases the number of locations a plauyer must hold in working memory to maximize guessing
*/



var canvas = document.getElementById('canvas');
var canvas2 = document.getElementById('canvas2');
var canvas3 = document.getElementById('canvas3');
var canvas4 = document.getElementById('canvas4');
var Qform = document.getElementById('Qform');
var demogForm = document.getElementById('demogQs');
var boring_instructions_text = document.getElementById('boring_instructions');
var gameover_text = document.getElementById('gameover');
var whackamole_inst = document.getElementById('whackainst');

var context = canvas.getContext('2d');
context.fillStyle = fillcolor;
context.lineWidth = linewidth;
context.strokeStyle = strokestyle;
context.fillStyle = fontcolor;
context.textAlign = textalign;
context.font = fonttype;

var context2 = canvas2.getContext('2d');
context2.fillStyle = fillcolor;
context2.lineWidth = linewidth;  
context2.strokeStyle = strokestyle;
context2.fillStyle = fontcolor;
context2.textAlign = textalign;
context2.font = fonttype;

var context3 = canvas3.getContext('2d');
context3.fillStyle = fillcolor;
context3.lineWidth = linewidth;
context3.strokeStyle = strokestyle;
context3.fillStyle = fontcolor;
context3.textAlign = textalign;
context3.font = fonttype;

var stimLocations = [];
var stimIndices = [];
var usedIndices = [];

var livemole = new Image();
livemole.src = 'images/mole.png'; 
var deadmole = new Image();
deadmole.src = 'images/mole-dead.png';

var fillcolor = "green";
var linewidth = 20;
var strokestyle = "#003300";
var fontcolor = "white";
var textalign = "center";
var fonttype = "bold 32px Arial";
var playing;
// var h = 1;

//var fname = "mydata.txt"

//game exectution variables
var neednewtimer = true;
var gamecomplete = false;
var showdemogform = true;
var clickedStims = 0;
var consent = false;
var p_randomStimList;
var C_StimList;
var numberoflevelscompleted = 0;
var maximumlevels = 1; //was 8
var maximumdifficultylevel = 15;

//game setting

var stim;
var stage;
var version = "whackamole"; //"whackamole" or "boring"
var length = 100; //normally 100
var width = 100; //normally 100
var stimtimer;
var difficultylevel = 8;// Math.floor(Math.random()*12 + 3) normally 3
var typestimpattern = "list"; //list random C_list
var typelevelselection = "everyother"; // everyother random incremental
var molespeedselection = "consistent"; // consistent, incremental, random


//preloadedvariables
molespeeds = [50,  400, 600, 800, 2000, 5000]; // could make these increments smaller should think more about it.

//list of mouse stim locations
//this is set at the bottom.
let p_randomStimList3 = [0, 2, 1, 2, 0, 2, 1, 1, 1, 0, 2, 2, 1, 2, 2, 0, 1, 0, 1, 0, 0, 2, 0, 1, 2, 0, 2, 0, 1, 2, 2, 0, 0, 2, 1, 0, 2, 2, 1, 2, 2, 0, 1, 0, 2, 2, 2, 1, 0, 2, 0, 0, 1, 1, 2, 1, 2, 2, 0, 2, 2, 1, 2, 0, 0, 0, 2, 1, 2, 1, 0, 2, 2, 1, 2, 1, 1, 2, 2, 0, 0, 2, 2, 0, 2, 0, 0, 0, 2, 2, 1, 1, 1, 1, 2, 1, 2, 2, 1, 0, 1, 1, 0, 0, 2, 1, 0, 0, 1, 0, 1, 2, 0, 1, 0, 2, 0, 2, 1, 0, 2, 2, 2, 0, 1, 0, 0, 1, 2, 2, 0, 1, 2, 0, 1, 1, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 1, 0, 1, 1, 0, 2, 2, 0, 0, 1, 0, 1, 2, 2, 1, 2, 0, 0, 2, 1, 1, 2, 2, 0, 1, 2, 1, 2, 1, 2, 0, 2, 0, 2];
let p_randomStimList4 = [0, 2, 2, 3, 1, 0, 0, 1, 0, 2, 3, 1, 3, 0, 3, 1, 0, 0, 2, 0, 2, 1, 2, 2, 2, 0, 3, 0, 2, 1, 2, 1, 2, 1, 1, 0, 2, 0, 0, 1, 1, 0, 2, 2, 3, 1, 1, 2, 0, 1, 3, 0, 1, 2, 3, 2, 1, 2, 2, 2, 2, 2, 3, 2, 2, 0, 1, 0, 2, 3, 0, 0, 1, 2, 0, 2, 0, 0, 0, 0, 2, 3, 3, 0, 2, 2, 1, 0, 3, 0, 1, 1, 1, 1, 3, 0, 1, 2, 1, 1, 2, 1, 1, 0, 2, 0, 0, 1, 2, 0, 3, 3, 1, 1, 0, 2, 2, 2, 0, 0, 0, 0, 1, 0, 1, 0, 2, 1, 2, 3, 3, 3, 1, 0, 1, 2, 2, 1, 0, 1, 2, 1, 3, 3, 3, 3, 1, 3, 0, 0, 2, 3, 1, 3, 1, 0, 2, 1, 1, 2, 2, 1, 3, 2, 1, 3, 1, 1, 1, 1, 0, 1, 1, 3, 1, 3, 1, 3, 1, 3];
let p_randomStimList5 = [0, 3, 0, 3, 0, 4, 0, 3, 2, 3, 1, 4, 4, 2, 1, 1, 3, 4, 1, 4, 4, 1, 2, 3, 1, 1, 0, 3, 1, 2, 0, 3, 1, 4, 4, 2, 0, 1, 2, 3, 0, 0, 4, 0, 0, 0, 0, 0, 3, 2, 1, 4, 4, 2, 3, 3, 3, 1, 1, 0, 1, 4, 4, 0, 0, 0, 4, 1, 2, 1, 0, 1, 2, 1, 3, 3, 1, 1, 0, 1, 3, 1, 4, 0, 1, 1, 0, 1, 3, 3, 2, 2, 2, 2, 4, 4, 1, 1, 2, 2, 3, 3, 0, 4, 3, 0, 1, 0, 0, 4, 1, 3, 0, 2, 3, 4, 1, 2, 3, 1, 1, 1, 3, 0, 0, 1, 1, 2, 2, 2, 1, 3, 0, 0, 3, 0, 4, 1, 3, 4, 1, 3, 4, 1, 1, 0, 1, 4, 2, 4, 2, 2, 4, 0, 1, 4, 4, 0, 3, 1, 4, 2, 3, 4, 2, 4, 2, 3, 3, 3, 4, 1, 3, 3, 1, 3, 0, 4, 2, 1];
let p_randomStimList6 = [0, 2, 2, 1, 5, 0, 0, 4, 1, 1, 0, 5, 1, 3, 5, 0, 3, 3, 4, 5, 2, 2, 1, 3, 2, 2, 5, 0, 5, 5, 1, 3, 5, 2, 2, 5, 5, 4, 2, 3, 3, 5, 3, 3, 4, 1, 0, 1, 4, 2, 1, 0, 2, 3, 0, 4, 1, 3, 0, 3, 1, 1, 3, 0, 3, 3, 0, 0, 1, 2, 4, 4, 0, 5, 1, 0, 5, 3, 2, 2, 1, 5, 0, 2, 0, 5, 3, 4, 0, 1, 4, 5, 0, 4, 3, 3, 5, 2, 4, 2, 5, 2, 2, 5, 1, 0, 0, 1, 0, 1, 5, 3, 0, 3, 3, 4, 3, 1, 5, 3, 0, 5, 1, 3, 0, 0, 4, 2, 2, 3, 4, 3, 1, 5, 2, 3, 0, 0, 4, 0, 5, 0, 5, 3, 4, 2, 2, 3, 0, 2, 5, 1, 2, 4, 4, 4, 1, 1, 2, 1, 2, 1, 3, 0, 5, 5, 1, 4, 1, 3, 5, 4, 1, 0, 3, 4, 4, 2, 3, 4];
let p_randomStimList7 = [4, 6, 6, 5, 5, 1, 5, 1, 4, 2, 3, 3, 0, 2, 6, 0, 5, 2, 6, 5, 5, 2, 0, 4, 6, 4, 1, 5, 1, 1, 1, 0, 4, 6, 6, 3, 4, 1, 4, 3, 1, 4, 5, 0, 6, 0, 3, 0, 5, 0, 6, 4, 6, 0, 5, 1, 1, 4, 4, 2, 6, 4, 3, 1, 2, 5, 6, 4, 2, 2, 3, 1, 5, 1, 1, 3, 3, 1, 5, 4, 4, 2, 5, 2, 5, 2, 5, 4, 3, 5, 2, 5, 1, 5, 5, 4, 6, 4, 5, 1, 5, 2, 4, 3, 0, 0, 0, 0, 2, 2, 1, 4, 4, 5, 1, 3, 1, 3, 2, 0, 6, 3, 2, 5, 4, 5, 0, 4, 6, 2, 4, 3, 0, 6, 2, 4, 0, 2, 6, 3, 2, 2, 5, 5, 0, 3, 3, 5, 0, 0, 3, 3, 2, 3, 1, 6, 4, 6, 0, 6, 4, 5, 6, 3, 2, 3, 5, 6, 4, 5, 5, 5, 4, 0, 2, 1, 2, 0, 6, 1];
let p_randomStimList8 = [5, 6, 5, 0, 1, 4, 5, 5, 1, 6, 6, 0, 4, 7, 5, 1, 4, 4, 1, 6, 5, 6, 3, 1, 3, 6, 4, 2, 3, 3, 7, 4, 2, 6, 0, 0, 3, 4, 7, 3, 4, 3, 5, 0, 3, 6, 2, 4, 3, 2, 7, 4, 1, 2, 7, 4, 3, 0, 2, 2, 5, 6, 6, 7, 0, 2, 2, 3, 3, 0, 0, 1, 3, 2, 4, 7, 5, 5, 0, 1, 6, 2, 5, 1, 4, 2, 2, 1, 3, 0, 6, 3, 6, 0, 5, 0, 3, 4, 0, 4, 0, 6, 2, 2, 5, 7, 1, 5, 1, 1, 3, 3, 4, 0, 3, 7, 2, 1, 1, 2, 6, 1, 7, 0, 4, 0, 6, 7, 5, 7, 0, 2, 1, 3, 4, 3, 7, 2, 0, 2, 6, 3, 0, 7, 2, 5, 5, 7, 0, 0, 7, 7, 4, 7, 1, 5, 6, 5, 2, 1, 4, 4, 2, 5, 0, 5, 7, 1, 0, 5, 2, 5, 6, 5, 6, 4, 7, 7, 0, 0, 1, 6, 5, 5, 0, 3, 1, 6, 2, 1, 2, 7, 7, 4, 2, 6, 6, 2, 5, 1, 1, 2, 5, 7, 2, 3, 1, 6, 0, 1, 7, 0, 6, 0, 3, 4, 2, 1, 7, 1, 1, 1, 7, 7, 1, 7, 6, 2, 0, 0, 1, 4, 3, 1, 5, 4, 5, 5, 0, 5, 4, 1, 5, 1, 0, 7, 6, 0, 5, 7, 1, 4, 0, 0, 0, 0, 5, 0, 7, 2, 4, 4, 3, 1, 3, 5, 7, 0, 1, 0, 1, 4, 7, 1, 1, 5, 4, 1, 7, 2, 1, 1, 5, 4, 2, 2, 1, 7, 4, 2, 5, 5, 6, 4, 2, 7, 4, 0, 1, 1]; 
let p_randomStimList9 = [2, 3, 0, 3, 2, 3, 5, 3, 8, 1, 1, 3, 1, 1, 0, 8, 7, 7, 3, 2, 8, 2, 4, 8, 7, 8, 5, 5, 0, 6, 8, 1, 5, 5, 6, 8, 3, 5, 7, 3, 6, 6, 8, 2, 5, 3, 0, 4, 2, 8, 7, 0, 5, 8, 1, 5, 4, 0, 0, 5, 6, 7, 3, 5, 1, 8, 0, 0, 8, 2, 5, 1, 1, 7, 1, 3, 4, 1, 2, 4, 1, 0, 5, 7, 8, 7, 7, 8, 1, 8, 1, 2, 5, 1, 5, 5, 2, 8, 1, 6, 8, 3, 7, 1, 6, 7, 6, 8, 4, 5, 6, 5, 0, 6, 3, 1, 4, 0, 1, 7, 1, 1, 4, 6, 3, 2, 5, 8, 3, 3, 6, 2, 5, 2, 0, 5, 7, 0, 1, 7, 5, 1, 1, 3, 3, 5, 7, 2, 3, 8, 2, 2, 4, 6, 7, 6, 2, 4, 6, 7, 0, 5, 6, 1, 6, 4, 6, 7, 2, 2, 5, 5, 2, 2, 7, 4, 5, 3, 7, 8];
let p_randomStimList10 = [3, 8, 1, 9, 7, 5, 0, 6, 5, 9, 5, 4, 5, 3, 1, 3, 4, 4, 4, 6, 5, 0, 7, 3, 0, 2, 5, 3, 3, 6, 9, 5, 0, 9, 2, 1, 1, 8, 4, 5, 7, 8, 2, 6, 5, 3, 9, 1, 7, 3, 9, 2, 7, 4, 5, 4, 6, 0, 2, 9, 7, 0, 7, 0, 5, 5, 6, 3, 6, 9, 3, 8, 9, 9, 1, 7, 1, 9, 0, 0, 3, 7, 2, 4, 0, 1, 7, 6, 5, 4, 4, 5, 0, 0, 8, 8, 0, 2, 4, 4, 6, 9, 8, 0, 1, 6, 2, 2, 0, 8, 9, 0, 8, 2, 8, 6, 9, 8, 4, 5, 2, 5, 5, 0, 8, 0, 0, 1, 3, 9, 3, 6, 5, 6, 3, 4, 5, 7, 3, 4, 9, 5, 5, 6, 5, 6, 1, 4, 7, 1, 6, 8, 7, 0, 6, 1, 7, 0, 0, 7, 6, 8, 2, 2, 8, 5, 1, 3, 9, 7, 6, 4, 9, 1, 4, 4, 3, 6, 7, 3];

ikeda_lag50_uPoint7 = [[383,284],[531,300],[672,287],[465,303],[543,266],[522,364],[650,276],[510,466],[658,301],[687,261],[577,244],[747,151],[513,379],[595,297],[479,412],[697,321],[485,246],[526,393],[439,277],[480,420],[511,222],[459,230],[576,240],[473,422],[459,387],[635,224],[400,303],[569,159],[500,411],[580,278],[421,363],[628,520],[404,358],[729,334],[423,330],[494,294],[491,248],[533,297],[748,291],[599,182],[443,368],[555,416],[506,240],[425,346],[531,401],[474,430],[571,175],[530,294],[638,368],[448,406],[568,254],[528,433],[434,275],[659,222],[433,412],[454,243],[437,295],[627,211],[533,264],[641,223],[676,218],[513,206],[750,195],[435,306],[540,215],[433,342],[696,250],[398,321],[460,277],[445,431],[437,330],[425,255],[391,345],[512,205],[437,338],[452,403],[606,191],[533,419],[532,173],[444,305],[514,216],[517,405],[708,362],[524,387],[733,274],[522,417],[407,348],[401,312],[435,272],[747,261],[564,177],[488,420],[533,248],[414,279],[519,412],[475,267],[442,325],[528,180],[432,276],[633,243],[452,396],[495,215],[508,259],[449,434],[640,194],[463,400],[396,372],[471,437],[597,186],[439,256],[616,191],[663,198],[434,239],[748,216],[487,436],[465,219],[509,421],[686,217],[539,396],[417,402],[442,363],[501,428],[431,428],[527,374],[434,239],[504,425],[451,396],[572,179],[499,259],[476,198],[470,434],[431,246],[459,283],[717,279],[454,282],[730,245],[478,270],[529,390],[537,409],[443,431],[744,245],[517,183],[441,316],[444,246],[486,444],[469,276],[402,364],[490,431],[466,205],[453,436],[602,197],[454,402],[411,270],[412,292],[441,353],[619,181],[440,385],[515,385],[446,318],[561,178],[417,412],[586,179],[648,187],[403,397],[745,225],[456,299],[391,319],[465,282],[676,200],[484,260],[488,406],[492,421],[462,288],[450,380],[449,282],[403,397],[462,287],[457,404],[527,181],[405,309],[401,275],[443,325],[413,411],[424,408],[713,239],[430,416],[725,230],[402,361],[462,274],[494,259],[443,365],[740,236],[450,216],[485,434],[404,393],[466,291],[409,385],[521,386],[454,300],[392,299]]

//list of mole timings
timinglist_flat650 = [650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650, 650];
timinglist_flat750 = [750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750, 750];
timinglist_flat800 = [800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800, 800];
timinglist_flat850 = [850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850, 850];
timinglist_flat900 = [900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900, 900];
timinglist_flat
timinglist_flat
timinglist_flat
timinglist_flat
timinglist_Ikeda = [1718,1446,1448,1592,1486,1252,1070,1257,1426,1453,1605,1429,1256,1123,1291,1459,1458,1595,1427,1195,1132,1317,1484,1499,1630,1382,1150,1142,1326,1485,1431,1515,1264,1039,1060,1252,1411,1551,1400,1282,1140,1010,1175,1296,1418,1314,1085,1056,853,833,1023,1022,868,775,996,1196,1129,1071,1257,1387,1355,1135,929,805,717,880,973,780,932,1125,1175,1343,1362,1488,1564,1318,1089,1139,1218,1393,1472,1434,1234,1013,849,1007,1206,1372,1191,1144,1330,1282,1078,1180,974,778,832,786,666,505,605,805,1023,1190,1133,925,789,996,950,766,595,771,966,976,1073,1210,1031,1179,1227,1251,1091,910,856,675,555,482,375,593,832,829,653,509,551,436,692,921,865,683,519,446,514,704,929,930,738,628,467,558,733,887,999,890,737,572,706,916,926,1111,1199,998,1039,1184,1300,1091,899,912,843,666,673,547,761,938,1144,1092,1057,855,1006,1121,911,760];

//fake cursor
// let cursoroffsetY;
// let cursoroffsetX;
// $.getJSON("/images/data.json",
//     (data)=>{cursoroffsetX = data;});
// $.getJSON("/images/data2.json",
//     (data2)=>{cursoroffsetY = data2;});
        
// setTimeout(()=>{console.log(my_data)}, 10_000)

//  = [-69, -78, -80, -62, -77, -69, -57, -62, -40, -35, -54, -65, -38,    -43, -75, -73, -66, -50, -64, -47, -74, -31, -75, -30, -44, -44,    -45, -48, -73, -37, -39, -68, -39, -44, -75, -62, -67, -66, -45,    -35, -66, -72, -35, -80, -48, -57, -56, -79, -45, -47, -65, -38,    -60, -39, -37, -43, -71, -32, -69, -71, -74, -31, -48, -65, -36,    -46, -49, -65, -78, -45, -58, -78, -45, -54, -41, -64, -54, -68,    -76, -57, -39, -42, -30, -54, -77, -45, -78, -55, -64, -76, -70,    -80, -30, -76, -60, -38, -68, -65, -38, -33, -38, -69, -72, -74,    -56, -60, -79, -73, -44, -48, -62, -37, -55, -72, -40, -55, -45,    -65, -59, -55, -54, -55, -42, -36, -66, -33, -66, -39, -31, -70,    -47, -80, -69, -52, -50, -36, -46, -30, -39, -73, -46, -62, -49,    -38, -67, -64, -53, -68, -45, -38, -55, -47, -61, -48, -37, -76,    -35, -75, -43, -72, -73, -67, -79, -67, -64, -41, -58, -65, -67,    -31, -38, -62, -56, -69, -45, -32, -79, -80, -64, -64, -72, -45,    -62, -55, -33, -49, -61, -70, -58, -80, -61, -46, -47, -68, -61,    -67, -53, -60, -56, -41, -47, -51, -36, -30, -70, -66, -66, -73,    -34, -42, -70, -30, -56, -78, -58, -58, -31, -56, -36, -67, -57,    -45, -61, -66, -65, -64, -74, -73, -36, -59, -34, -66, -57, -37,    -48, -30, -31, -33, -80, -54, -72, -68, -50, -43, -43, -50, -54,    -58, -57, -53, -38, -44, -57, -46, -35, -35, -67, -72, -48, -66,    -30, -32, -72, -45, -35, -53, -36, -42, -67, -41, -75, -38, -59,    -77, -46, -57, -40, -72, -69, -39, -76, -30, -33, -34, -58, -48,    -73, -42, -54, -47, -47, -57, -45, -72, -77, -50, -34, -65, -39,    -48];
//  = [-46, -59, -58, -73, -55, -65, -49, -35, -72, -38, -34, -68, -76,    -52, -37, -55, -64, -67, -41, -60, -51, -69, -35, -53, -76, -32,    -47, -32, -47, -73, -58, -45, -44, -34, -78, -49, -66, -58, -74,    -68, -74, -80, -31, -69, -51, -76, -59, -37, -31, -37, -43, -51,    -77, -38, -42, -36, -60, -56, -39, -78, -45, -33, -30, -56, -42,    -61, -77, -42, -51, -72, -77, -52, -80, -35, -49, -53, -75, -37,    -80, -75, -42, -60, -34, -71, -68, -34, -67, -37, -47, -71, -77,    -36, -36, -63, -46, -75, -77, -57, -72, -73, -31, -63, -61, -63,    -43, -39, -68, -67, -36, -58, -36, -67, -66, -60, -48, -52, -75,    -52, -56, -59, -40, -42, -69, -50, -58, -42, -71, -76, -58, -40,    -70, -48, -51, -44, -57, -47, -58, -32, -33, -39, -39, -30, -80,    -56, -37, -49, -43, -37, -50, -37, -53, -51, -56, -52, -51, -78,    -47, -44, -58, -69, -40, -36, -64, -36, -42, -41, -55, -49, -40,    -45, -80, -53, -32, -47, -43, -68, -66, -45, -37, -48, -45, -68,    -76, -60, -36, -73, -48, -61, -45, -45, -71, -76, -78, -66, -72,    -37, -69, -79, -66, -64, -51, -69, -73, -33, -66, -46, -50, -59,    -34, -74, -68, -43, -45, -30, -56, -61, -58, -63, -47, -36, -48,    -56, -79, -37, -72, -57, -59, -37, -50, -42, -44, -74, -43, -75,    -79, -70, -48, -47, -54, -61, -71, -64, -48, -75, -47, -75, -62,    -78, -31, -30, -61, -30, -59, -49, -65, -39, -49, -68, -74, -61,    -69, -77, -59, -75, -31, -64, -43, -74, -74, -49, -67, -30, -70,    -34, -57, -78, -40, -32, -36, -33, -75, -47, -68, -52, -70, -38,    -62, -73, -51, -67, -35, -71, -71, -80, -42, -60, -37, -56, -71,    -44];

//task parameters
var nextstimtimeList = timinglist_flat1200;
var C_StimList = p_randomStimList8;
var n_back = 2;
var nextstimtime;
var clickedstimnextstim = 500;
var numberoflevels = 15; //10
var numberofhitsneeded = 1000; //20
var stimsclickedthislevel = 0;


//experiment variables

// var timetimerstarted;
var levelStartTime;
var leveltimelimit = 180000; //60000
var cantclickagain = false;
var numberofstimsshown = 0;
var stimsshownthislevel = 0;
var timemousecords = [];
var timestimsarrive = [];
var mousecordsX = [];
var mousecordsY = [];
var leveltheyreon = [];
var mouseCordsXClicks = [];
var mouseCordsYClicks = [];
var mouseClickTimes = [];
let contScore = [];

//

function startStimTimer(x) {
    // var timetimerstarted = Date.now();
    // console.log(Date.now())
    if(stimtimer){
        myStopFunction();    
    }
    stimtimer = setTimeout(placeStim, x);
};

function delaytimer(delay){
    if(stimtimer){
        myStopFunction();
    }
    startStimTimer(delay);
};

function myStopFunction() {
    clearTimeout(stimtimer);
    stimtimer = null;
};

var placeStim = function() {

	if ((Date.now() > (levelStartTime + leveltimelimit)) || (p_randomStimList.length < 3) || (nextstimtimeList.length < 3)) {
        console.log(nextstimtimeList.length, p_randomStimList.length, (Date.now() > (levelStartTime + leveltimelimit)))
		myStopFunction();
		advanceLevel();
	} else {
        ++numberofstimsshown;
        ++stimsshownthislevel;
        contScore.push(stimsclickedthislevel/stimsshownthislevel);
        cantclickagain = false;
        if(typestimpattern == "list"){
    	    listPlaceStim();
        } else if (typestimpattern == "random"){
    	    Rand_placeStim();
        } else if (typestimpattern == "C_list"){
            C_listPlaceStim();
        }
        nextstimtime = nextstimtimeList[0];
        nextstimtimeList.shift();
	    startStimTimer(nextstimtime);
    }
};


function Rand_placeStim(){
	console.log(stimLocations.length);
    var i = getRandomInt(0,stimLocations.length);
    stim = new Stim(stimLocations[i].left + 50, stimLocations[i].top + 50, 50);
    if(version == "whackamole"){
        drawMole(stimLocations[i].left + 50, stimLocations[i].top + 50);   
    } else if(version == "boring"){
        drawCircle(stimLocations[i].left + 50, stimLocations[i].top + 50);
    }
}

function listPlaceStim(){
    if(version == "whackamole"){
        stim = new Stim(stimLocations[p_randomStimList[0]].left + 50, stimLocations[p_randomStimList[0]].top + 50, 50);
        drawMole(stimLocations[p_randomStimList[0]].left + 50, stimLocations[p_randomStimList[0]].top + 50);
        p_randomStimList.shift();   
    } else if(version == "boring"){
        drawCircle(stimLocations[i].left + 50, stimLocations[i].top + 50);
    }
}

function C_listPlaceStim(){
    if(version == "whackamole"){
        stim = new Stim(C_StimList[0][0], C_StimList[0][1], 50);
        drawMole(C_StimList[0][0], C_StimList[0][1]);
        C_StimList.shift();   
    } else if(version == "boring"){
        drawCircle(C_StimList[0][0], C_StimList[0][1]);
        C_StimList.shift();
    }
}


var drawCircle = function(x, y, fill, color) {
    context2.clearRect(0, 0, canvas2.width, canvas2.height);
    context2.beginPath();
    context2.arc(x, y, 50, 0, 2 * Math.PI);
    if(fill == true){
    	context.fillStyle = color;
    	context2.fill();
    } else {
    	context2.stroke();
        timestimsarrive.push(Date.now()); 
        //console.log("loging in draw circle");
    }
};

var play = function(lvl) {
    // console.log(document.cookie);
    console.log(document.cookie.split('=')[1]);
    stimsshownthislevel = 0;
    stimsclickedthislevel = 0;
    boring_instructions_text.style.display='none';
    whackamole_inst.style.display='none';

    if(version == "whackamole"){
        var grass = new Image();
    
        grass.onload=function(){
            document.body.background = grass;
        }

        grass.src = 'images/grassbackground.jpg';

        $("body").css("background-image", "url(images/grassbackground.jpg)");

    }
    if(molespeedselection == "random"){
    	nextstimtime = molespeeds[Math.floor(Math.random()*molespeeds.length)];
    	console.log(nextstimtime);
    }
    // console.log(nextstimtime);
	
    Qform.style.display='none';
    available_stimLocations(lvl);
    // console.log(stimLocations)
    levelStartTime = Date.now();
    placeStim();
};

function logScores(accuracyratio, TS_accuracyratio, mousecordsX, mousecordsY, timemousecords, timestimsarrive, difficultylevel, nextstimtimeList, stimsclickedthislevel, stimsshownthislevel, mouseCordsYClicks, mouseCordsXClicks, mouseClickTimes) {
    $.ajax({
        url: '/logPlayData',
        type: 'POST',
        data: {
            difficultylevel: difficultylevel,
            nextstimtimeList: nextstimtimeList,
            stimsclickedthislevel: stimsclickedthislevel,
            stimsshownthislevel: stimsshownthislevel,
            accuracyratio: accuracyratio,
            TS_accuracyratio: TS_accuracyratio,
            mousecordsX: mousecordsX,
            mousecordsY: mousecordsY,
            timemousecords: timemousecords,
            timestimsarrive: timestimsarrive,
            mouseCordsYClicks: mouseCordsYClicks,
            mouseCordsXClicks: mouseCordsXClicks,
            mouseClickTimes: mouseClickTimes
        }
    });
};

function advanceLevel() {
	++numberoflevelscompleted;
    myStopFunction();
    var accuracyratio = stimsclickedthislevel/stimsshownthislevel;
    logScores(accuracyratio, contScore, mousecordsX, mousecordsY, timemousecords, timestimsarrive, difficultylevel, nextstimtimeList, stimsclickedthislevel, stimsshownthislevel, mouseCordsYClicks, mouseCordsXClicks, mouseClickTimes);
    context2.clearRect(0, 0, canvas3.width, canvas3.height);
    context.clearRect(0, 0, canvas3.width, canvas3.height);
    clickedStims = 1;
    stimIndices = range(stimLocations.length);
    stimLocations = [];
    //h = 1;
    mousecordsX = [];
    mousecordsY = [];
    mouseCordsYClicks = [];
    mouseCordsXClicks = [];
    stimsshownthislevel = 0;
    stimsclickedthislevel = 0;
    timemousecords = [];
    timestimsarrive = [];
    mouseClickTimes = [];
    if(typelevelselection == "incremental"){
    	++difficultylevel;
    } else if (typelevelselection == "everyother"){
    	++difficultylevel;
    	++difficultylevel;
    } else if(typelevelselection == "random"){

    }
    if(difficultylevel>maximumdifficultylevel){
        gamecomplete = true;
    }else if(numberoflevelscompleted >= maximumlevels){
    	gamecomplete = true;
    }
    //sets the random list to be an appropriate one

    if (difficultylevel == 3) {
        p_randomStimList = p_randomStimList3
    } else if (difficultylevel == 4) {
        p_randomStimList = p_randomStimList4
    } else if (difficultylevel == 3) {
        p_randomStimList = p_randomStimList5
    } else if (difficultylevel == 5) {
        p_randomStimList = p_randomStimList5
    } else if (difficultylevel == 6) {
        p_randomStimList = p_randomStimList6
    } else if (difficultylevel == 7) {
        p_randomStimList = p_randomStimList7
    } else if (difficultylevel == 8) {
        p_randomStimList = p_randomStimList8
    } else if (difficultylevel == 9) {
        p_randomStimList = p_randomStimList9
    } else if (difficultylevel == 10) {
        p_randomStimList = p_randomStimList10
    }
    checkfun();    
};

var checkfun = function() {

	$("body").css("background-image", "none");

    Qform.reset();
    Qform.style.display=""; // initial
    stage = "checkingfun";
};

function backtoGame(form){
    saveform(form);
    context3.clearRect(0, 0, canvas3.width, canvas3.height);
    context2.clearRect(0, 0, canvas2.width, canvas2.height);
    if(gamecomplete == false){
        stage = "playing";
        play(difficultylevel);
        return false;
    } else {
        thatsgame();
        return false;
    }
}

function saveform(form) {
    var checkfunData;
    //console.log(form.id);
    checkfunData += form.id + "!";
    for (i = 0; i < form.length; i++){
    	if(form.elements[i].type != "radio" && form.elements[i].type != null){
    		checkfunData += form.elements[i].name + "=" + form.elements[i].value + ", ";
    	}
        if(form.elements[i].checked == true){
            checkfunData += form.elements[i].name + "=" + form.elements[i].value + ", ";
        }
    }
    json_checkfunData = JSON.stringify(checkfunData);
    $.ajax({
        url: '/logForm',
        data: {formData: json_checkfunData},
        type: 'POST'
    });
    return false;
}


var thatsgame = function() {
    demogForm.style.display='none';
    Qform.style.display='none';
    if(showdemogform == true){
        showdemogform = false;
        demogForm.reset();
        demogForm.style.display=""; //initial
    } else {
        $("body").removeAttr('style');
        gameover_text.style.display=""; //initial
        key = document.cookie.split('=')[1]; //makeid();
        key = "ID!" + key
        jsonkey = JSON.stringify(key);
        $.ajax({
        url: '/logForm',
        data: {formData: jsonkey},
        type: 'POST'
        });
        document.getElementById('key').innerHTML = key;
    }
};

var available_stimLocations = function(lvl) {
	//console.log(lvl); 
	loopbreaker = 0;
    for (j = 0; j < lvl; j++) {
        //i = j * 700;
        angle = 15 * j;
        a = 60;
        //b = 2.7;
        b = 1.5;
        r = a + (b * angle);
        x = r * Math.cos(angle);
        x = Math.round(x) + 400; // + 400
        y = r * Math.sin(angle);
        y = Math.round(y) + 300; // + 400
        //h++;
        //label = h.toString();
        //drawRect(x, y, "Box" + label);
        var stimLocation = new StimLocation(x, y, length, width);
        if((x<750) && (x>0) && (y>0) && (y<750)){
        	stimLocations.push(stimLocation);
        } else{
        	--j
        	++loopbreaker;
        }
        if(loopbreaker>25){
        	break;
        }

        if(version == "whackamole"){
            if(typestimpattern == "C_list"){
                
            } else {
                drawMoleHill(x, y);
            }
               
        } else if(version == "boring"){
            drawRect(x, y); //previosly had label as parameter if it breaks
        }
    }
    stimIndices = range(stimLocations.length);
    // console.log(stimLocations);
};

var Stim = function(x, y, r) {
    this.x = x;
    this.y = y;
    this.r = r;
};

var drawRect = function(x, y) {

    context.strokeRect(x, y, 100, 100);
    //context.fillText(filltext, x, y);

};

var StimLocation = function(x, y, length, width) {
    this.left = x;
    this.top = y;
    this.right = x + width;
    this.bottom = y + length;
};


canvas4.addEventListener('click', function(e) {
    var clickedX = e.pageX - this.offsetLeft;
    var clickedY = e.pageY - this.offsetTop;

    if (stage == "intro") {
        if (clickedX < 400 && clickedX >= 300 && clickedY >= 600 && clickedY <= 700) {
            context3.clearRect(0, 0, canvas3.width, canvas3.height);
            consent = true;
            stage = "playing";
            play(difficultylevel);
        }
    } else if (stage == "playing") {

        mouseCordsYClicks.push(clickedY);
        mouseCordsXClicks.push(clickedX);
        mouseClickTimes.push(Date.now());

        if ((Math.abs(clickedX - stim.x) < stim.r) && (Math.abs(clickedY - stim.y) < stim.r) && (cantclickagain == false)) {
            cantclickagain = true;
            context2.clearRect(0, 0, canvas2.width, canvas2.height);
            if (clickedStims == numberofhitsneeded) {
            	clickedStims++;
                ++stimsclickedthislevel;
                advanceLevel();
            } else {
                //set cursor offset noise
                // if(clickedStims > 1){
                //     setInterval(function(){
                //         cursoroffsetY.shift(),
                //         cursoroffsetX.shift()
                //     },35)
                // };
            	clickedStims++;
                ++stimsclickedthislevel;
                // console.log(nextstimtime);
                if(version == "whackamole"){
                    drawMole(stim.x, stim.y, true); 
                } else if(version == "boring"){
                    drawCircle(stim.x, stim.y, true, "green");
                }
                // delaytimer(clickedstimnextstim);
            }
        }
        else {
            //do something for missed click option
        }
    }
});

function getRandomInt(min, max) {
    min = Math.ceil(min);
    max = Math.floor(max);
    return Math.floor(Math.random() * (max - min)) + min;
}

function range(i) { return i ? range(i - 1).concat(i - 1) : [] }


canvas4.addEventListener('mousemove', function(e) {
    var mouseX = e.pageX - this.offsetLeft;
    var mouseY = e.pageY - this.offsetTop;
    if(stage == "playing"){
        mousecordsX.push(mouseX);
        mousecordsY.push(mouseY);
        //console.log(mouseX);
        timemousecords.push(Date.now());
        //console.log(timemousecords);
        leveltheyreon.push(difficultylevel);
    }
});



// $(document).mousemove(function(e) {
//     // console.log("mousemoving")
//     $('.altMouse').offset({
//         left: e.pageX + cursoroffsetX[0],
//         top: e.pageY +  cursoroffsetY[0]
//     });
// });


var checktime = function() {
    var d = new Date();
    return d.getTime();
}

function saveToFile(data) {
    jsonString = JSON.stringify(data);
    $.ajax({
        url: 'save.php',
        data: { 'jsonString': jsonString},
        type: 'POST'
    });
}

function updateSlider(value, slider) {
    document.getElementById(slider).innerHTML=value;
}





/*

NEW FUNCTIONS MADE FOR WHACKAMOLE

*/



var drawMole = function(x, y, dead) {

    if(dead==true){
        context2.clearRect(0, 0, canvas2.width, canvas2.height);
        context2.drawImage(deadmole, x - 50, y - 50);
    } else{
        context2.clearRect(0, 0, canvas2.width, canvas2.height);
        context2.drawImage(livemole, x - 50, y - 50);  
        timestimsarrive.push(Date.now()); 
        console.log(Date.now());
        // console.log("drewnewmole");
    }
};

var drawMoleHill = function(x, y) {

    var hole = new Image();
    hole.onload=function(){
     	context.drawImage(hole, x - 35, y + 50);
    }
    hole.src = 'images/mole_hole1.png';
};

function makeid() {
  var text = "";
  var possible = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";

  for (var i = 0; i < 12; i++)
    text += possible.charAt(Math.floor(Math.random() * possible.length));

  return text;
}

var setversion = function(){
	/*
    if (Math.random()>.5) {
	   version = "whackamole"; // boring or whackamole

	} else {
		version = "boring";
	}
    */
    //always whackamole now
    version = "whackamole";
};

var randtester = function(){
	var heads = 0;
	for (var i = 1000; i >= 0; i--) {
		if (Math.random()>.5) {
			heads += 1;
		}	}
	return heads;
};

//set up game at start, probbaly find a cleaner way to do this later

stage = "intro";
Qform.style.display='none';
demogForm.style.display='none';
gameover_text.style.display='none';
//set for list version
p_randomStimList = p_randomStimList8;
//
if(version=="boring"){
    whackamole_inst.style.display='none';
} else if (version == "whackamole") {
    boring_instructions_text.style.display='none';
};
context3.font = "30px Arial";
//context3.strokeText("click the rectangle to begin", 400, 400);
context3.strokeRect(300, 600, 100, 100);
context3.fillText("continue", 300, 600);